{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"\u30de\u30fc\u30b1\u30c6\u30a3\u30f3\u30b0\u30c7\u30fc\u30bf\u5206\u6790","text":""},{"location":"index.html#_2","title":"\u6982\u8981","text":"<ul> <li>\u300e\u30de\u30fc\u30b1\u30c6\u30a3\u30f3\u30b0\u30c7\u30fc\u30bf\u5206\u6790\u300f\u306ePython\u5b9f\u88c5\u3092\u307e\u3068\u3081\u3066\u3044\u304f\u3002</li> </ul> <ul> <li>Polars\u3068plotly\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3002</li> </ul> \u5404\u7ae0 \u30ea\u30f3\u30af \u6700\u7d42\u66f4\u65b0\u65e5 \u7b2c3\u7ae0 \u96c6\u8a08\u3068\u53ef\u8996\u5316\u304b\u3089\u30c7\u30fc\u30bf\u3092\u7406\u89e3\u3059\u308b chapter03 2024-02-11 \u7b2c4\u7ae0 \u9867\u5ba2\u306e\u5206\u6790 chapter04 2024-02-11"},{"location":"notebooks/chapter03.html","title":"\u7b2c3\u7ae0 \u96c6\u8a08\u3068\u53ef\u8996\u5316\u304b\u3089\u30c7\u30fc\u30bf\u3092\u7406\u89e3\u3059\u308b","text":"In\u00a0[1]: Copied! <pre>import polars as pl\nfrom scipy import stats\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport plotly.express as px\n</pre> import polars as pl from scipy import stats from plotly.subplots import make_subplots import plotly.graph_objects as go import plotly.express as px In\u00a0[2]: Copied! <pre>url_yakiniku_data = 'https://raw.githubusercontent.com/asakura-data-science/marketing/main/Chapter_3/in/yakiniku_2018.csv'\ndf = (\n    pl.read_csv(url_yakiniku_data)\n    .with_columns(pl.col('\u65e5\u4ed8').cast(pl.Utf8).str.to_date(format='%Y%m%d'))\n)\ndf.head()\n</pre> url_yakiniku_data = 'https://raw.githubusercontent.com/asakura-data-science/marketing/main/Chapter_3/in/yakiniku_2018.csv' df = (     pl.read_csv(url_yakiniku_data)     .with_columns(pl.col('\u65e5\u4ed8').cast(pl.Utf8).str.to_date(format='%Y%m%d')) ) df.head() Out[2]: shape: (5, 11)\u5e97\u8217ID\u65e5\u4ed8\u6642\u9593\u53d6\u5f15ID\u53d6\u5f15\u660e\u7d30ID\u5546\u54c1ID\u5546\u54c1\u540d\u5358\u4fa1\u6570\u91cf\u652f\u6255\u65b9\u6cd5\u5206\u985ei64datei64i64i64i64stri64i64strstr12018-03-0111481811112\"\u971c\u964d\u5207\u843d\u3057\u713c\u8089\u5b9a\u98df\"13001\"\u30af\u30ec\u30b8\u30c3\u30c8\"\"\u5b9a\u98df\"12018-03-0111481812121\"\uff33\u3068\u308d\u308d\"01\"\u30af\u30ec\u30b8\u30c3\u30c8\"\"\u30b5\u30a4\u30c9\"12018-03-0111495021104\"\u77f3\u713c\u30d3\u30d3\u30f3\u30d0\u5b9a\u98df\"11001\"\u30af\u30ec\u30b8\u30c3\u30c8\"\"\u5b9a\u98df\"12018-03-0111504332625\"\u9ed2\u6bdb\u548c\u725b\u30b5\u30fc\u30ed\u30a4\u30f3\u713c\u8089\"12001\"\u30af\u30ec\u30b8\u30c3\u30c8\"\"\u8089\"12018-03-0111504333330\"\u3054\u98ef\"2001\"\u30af\u30ec\u30b8\u30c3\u30c8\"\"\u30b5\u30a4\u30c9\" In\u00a0[3]: Copied! <pre>print('\u30c7\u30fc\u30bf\u958b\u59cb\u65e5:', df['\u65e5\u4ed8'].min())\nprint('\u30c7\u30fc\u30bf\u7d42\u4e86\u65e5:', df['\u65e5\u4ed8'].max())\nprint('\u55b6\u696d\u65e5\u6570:', df['\u65e5\u4ed8'].unique().len())\n</pre> print('\u30c7\u30fc\u30bf\u958b\u59cb\u65e5:', df['\u65e5\u4ed8'].min()) print('\u30c7\u30fc\u30bf\u7d42\u4e86\u65e5:', df['\u65e5\u4ed8'].max()) print('\u55b6\u696d\u65e5\u6570:', df['\u65e5\u4ed8'].unique().len()) <pre>\u30c7\u30fc\u30bf\u958b\u59cb\u65e5: 2018-03-01\n\u30c7\u30fc\u30bf\u7d42\u4e86\u65e5: 2019-02-28\n\u55b6\u696d\u65e5\u6570: 364\n</pre> In\u00a0[4]: Copied! <pre># \u58f2\u4e0a\u91d1\u984d\ndf = (\n    df.with_columns(\n        (pl.col('\u5358\u4fa1')*pl.col('\u6570\u91cf')).alias('\u58f2\u4e0a\u91d1\u984d')\n    )\n)\nprint('\u58f2\u4e0a\u91d1\u984d:', df['\u58f2\u4e0a\u91d1\u984d'].sum())\n\n# \u58f2\u4e0a\u91d1\u984dtop10\u5546\u54c1\n(\n    df.group_by('\u5546\u54c1\u540d')\n    .agg(pl.col('\u58f2\u4e0a\u91d1\u984d').sum())\n    .sort(by='\u58f2\u4e0a\u91d1\u984d', descending=True)\n    .head(10)\n)\n</pre> # \u58f2\u4e0a\u91d1\u984d df = (     df.with_columns(         (pl.col('\u5358\u4fa1')*pl.col('\u6570\u91cf')).alias('\u58f2\u4e0a\u91d1\u984d')     ) ) print('\u58f2\u4e0a\u91d1\u984d:', df['\u58f2\u4e0a\u91d1\u984d'].sum())  # \u58f2\u4e0a\u91d1\u984dtop10\u5546\u54c1 (     df.group_by('\u5546\u54c1\u540d')     .agg(pl.col('\u58f2\u4e0a\u91d1\u984d').sum())     .sort(by='\u58f2\u4e0a\u91d1\u984d', descending=True)     .head(10) ) <pre>\u58f2\u4e0a\u91d1\u984d: 137681100\n</pre> Out[4]: shape: (10, 2)\u5546\u54c1\u540d\u58f2\u4e0a\u91d1\u984dstri64\"\u4eca\u5bb5\u306e\u8d05\u6ca2\u798f\u725b\u76db\u308a\"9361200\"\u751f\u30d3\u30fc\u30eb\uff08\u4e2d\uff09\"5554000\"\u713c\u8089\uff14\uff10\uff10\uff10\u30b3\u30fc\u30b9\"5435200\"\u30bf\u30f3\u5869\u5927\u5224\u5207\u308a\"4874100\"\u8d64\u8eab\u30fb\u30cf\u30e9\u30df\u713c\u8089\u5b9a\u98df\"3505500\"\u53b3\u9078\u30cf\u30e9\u30df\u713c\u8089\u5b9a\u98df\"2989000\"\u53b3\u9078\u30cf\u30e9\u30df\"2877000\"\u30ab\u30eb\u30d3\u30fb\u30cf\u30e9\u30df\u713c\u8089\u5b9a\u98df\"2829000\"\u30ab\u30eb\u30d3\u30fb\u30ed\u30fc\u30b9\u30fb\u30cf\u30e9\u30df\u713c\u8089\u5b9a\u20262563600\"\u30ab\u30eb\u30d3\uff06\u30ed\u30fc\u30b9\uff06\u30cf\u30e9\u30df\u76db\u308a\"2355000 In\u00a0[5]: Copied! <pre># \u4f8b\u984c3.1\nprint('\u5546\u54c1\u7a2e\u985e\u6570:', df['\u5546\u54c1\u540d'].unique().len())\n</pre> # \u4f8b\u984c3.1 print('\u5546\u54c1\u7a2e\u985e\u6570:', df['\u5546\u54c1\u540d'].unique().len()) <pre>\u5546\u54c1\u7a2e\u985e\u6570: 323\n</pre> In\u00a0[6]: Copied! <pre># \u4f8b\u984c3.2\n# \u58f2\u4e0a\u6570\u91cf\u4e0a\u4f4d\uff11\uff10\u5546\u54c1\n(\n    df.group_by('\u5546\u54c1\u540d')\n    .agg(pl.col('\u6570\u91cf').sum())\n    .sort(by='\u6570\u91cf', descending=True)\n    .head(10)\n)\n</pre> # \u4f8b\u984c3.2 # \u58f2\u4e0a\u6570\u91cf\u4e0a\u4f4d\uff11\uff10\u5546\u54c1 (     df.group_by('\u5546\u54c1\u540d')     .agg(pl.col('\u6570\u91cf').sum())     .sort(by='\u6570\u91cf', descending=True)     .head(10) ) Out[6]: shape: (10, 2)\u5546\u54c1\u540d\u6570\u91cfstri64\"\u751f\u30d3\u30fc\u30eb\uff08\u4e2d\uff09\"11108\"\u3054\u98ef\"5636\"\u70cf\u9f8d\u8336\"4600\"\u30fb\u5927\u5224\u5207\u308a\u30bf\u30f3\u5869\"4577\"\u30fb\u5927\u5224\u30cf\u30e9\u30df\uff11\u679a\u5207\u30ea\"4519\"\u30bf\u30f3\u5869\u5927\u5224\u5207\u308a\"4431\"\u3054\u98ef\u5927\u76db\u308a\"3277\"\u53b3\u9078\u30cf\u30e9\u30df\u713c\u8089\u5b9a\u98df\"2989\"\u30fb\u30c7\u30b6\u30fc\u30c8\"2955\"\u53b3\u9078\u30cf\u30e9\u30df\"2877 In\u00a0[7]: Copied! <pre># \u6708\u5225\u306e\u58f2\u4e0a\u91d1\u984d\ndf_monthly_sales = (\n    df.sort(by='\u65e5\u4ed8')\n    .group_by_dynamic(index_column='\u65e5\u4ed8', every='1mo')\n    .agg(pl.col('\u58f2\u4e0a\u91d1\u984d').sum(), pl.col('\u65e5\u4ed8').unique().len().alias('\u65e5\u6570'))\n    .with_columns((pl.col('\u58f2\u4e0a\u91d1\u984d')/pl.col('\u65e5\u6570')).alias('\u5e73\u5747\u58f2\u4e0a\u91d1\u984d'))\n)\n\n# plot\nfig = make_subplots(rows=1, cols=2, subplot_titles=['\u58f2\u4e0a\u91d1\u984d', '\u5e73\u5747\u58f2\u4e0a\u91d1\u984d'])\nfig.add_trace(\n    go.Bar(x=df_monthly_sales['\u65e5\u4ed8'], y=df_monthly_sales['\u58f2\u4e0a\u91d1\u984d']),\n    row=1, col=1\n)\nfig.add_trace(\n    go.Bar(x=df_monthly_sales['\u65e5\u4ed8'], y=df_monthly_sales['\u5e73\u5747\u58f2\u4e0a\u91d1\u984d']),\n    row=1, col=2\n)\nfig.update_xaxes(title_text='\u5e74\u6708')\nfig.update_layout(width=800, height=600)\nfig.show()\n</pre> # \u6708\u5225\u306e\u58f2\u4e0a\u91d1\u984d df_monthly_sales = (     df.sort(by='\u65e5\u4ed8')     .group_by_dynamic(index_column='\u65e5\u4ed8', every='1mo')     .agg(pl.col('\u58f2\u4e0a\u91d1\u984d').sum(), pl.col('\u65e5\u4ed8').unique().len().alias('\u65e5\u6570'))     .with_columns((pl.col('\u58f2\u4e0a\u91d1\u984d')/pl.col('\u65e5\u6570')).alias('\u5e73\u5747\u58f2\u4e0a\u91d1\u984d')) )  # plot fig = make_subplots(rows=1, cols=2, subplot_titles=['\u58f2\u4e0a\u91d1\u984d', '\u5e73\u5747\u58f2\u4e0a\u91d1\u984d']) fig.add_trace(     go.Bar(x=df_monthly_sales['\u65e5\u4ed8'], y=df_monthly_sales['\u58f2\u4e0a\u91d1\u984d']),     row=1, col=1 ) fig.add_trace(     go.Bar(x=df_monthly_sales['\u65e5\u4ed8'], y=df_monthly_sales['\u5e73\u5747\u58f2\u4e0a\u91d1\u984d']),     row=1, col=2 ) fig.update_xaxes(title_text='\u5e74\u6708') fig.update_layout(width=800, height=600) fig.show() In\u00a0[8]: Copied! <pre># \u4f8b\u984c3.3\n# \u58f2\u4e0a\u91d1\u984dtop10\u306e\u65e5\u4ed8\n(\n    df.group_by('\u65e5\u4ed8')\n    .agg(pl.col('\u58f2\u4e0a\u91d1\u984d').sum())\n    .sort(by='\u58f2\u4e0a\u91d1\u984d', descending=True)\n    .head(10)\n)\n</pre> # \u4f8b\u984c3.3 # \u58f2\u4e0a\u91d1\u984dtop10\u306e\u65e5\u4ed8 (     df.group_by('\u65e5\u4ed8')     .agg(pl.col('\u58f2\u4e0a\u91d1\u984d').sum())     .sort(by='\u58f2\u4e0a\u91d1\u984d', descending=True)     .head(10) ) Out[8]: shape: (10, 2)\u65e5\u4ed8\u58f2\u4e0a\u91d1\u984ddatei642019-02-109101002019-01-028989002018-07-148196002018-03-257889002018-06-027889002018-03-037825002018-05-037467002018-12-297442002018-03-317238002018-10-07723600 In\u00a0[9]: Copied! <pre>import zipfile\nimport requests\nimport io\nurl_zip_data = 'https://github.com/asakura-data-science/marketing/raw/main/Chapter_3/in/sec3-2data.csv.zip'\nres = requests.get(url_zip_data)\nzip = zipfile.ZipFile(io.BytesIO(res.content))\ndf = (\n    pl.read_csv(zip.read('sec3-2data.csv'))\n    .with_columns(pl.col('\u65e5\u4ed8').cast(pl.Utf8).str.to_date(format='%Y%m%d'))\n)\ndf.head()\n</pre> import zipfile import requests import io url_zip_data = 'https://github.com/asakura-data-science/marketing/raw/main/Chapter_3/in/sec3-2data.csv.zip' res = requests.get(url_zip_data) zip = zipfile.ZipFile(io.BytesIO(res.content)) df = (     pl.read_csv(zip.read('sec3-2data.csv'))     .with_columns(pl.col('\u65e5\u4ed8').cast(pl.Utf8).str.to_date(format='%Y%m%d')) ) df.head() Out[9]: shape: (5, 13)\u65e5\u4ed8\u8cfc\u5165\u6570\u91cf\u5358\u4fa1\u91d1\u984d\u5927\u5206\u985e\u4e2d\u5206\u985e\u5c0f\u5206\u985e\u7d30\u5206\u985e\u5927\u5206\u985e\u540d\u4e2d\u5206\u985e\u540d\u5c0f\u5206\u985e\u540d\u7d30\u5206\u985e\u540d\u90fd\u9053\u5e9c\u770c\u540ddatei64i64i64i64i64i64i64strstrstrstrstr2013-05-3012782781111115111511\"\u98df\u54c1\"\"\u52a0\u5de5\u98df\u54c1\"\"\u52a0\u5de5\u8089\u985e\"\"\u30d9\u30fc\u30b3\u30f3\"\"\u5927\u962a\u5e9c\"2013-06-27198981111113111303\"\u98df\u54c1\"\"\u52a0\u5de5\u98df\u54c1\"\"\u30d1\u30f3\u30fb\u30b7\u30ea\u30a2\u30eb\u985e\"\"\u83d3\u5b50\u30d1\u30f3\"\"\u5927\u962a\u5e9c\"2013-10-31198981111113111303\"\u98df\u54c1\"\"\u52a0\u5de5\u98df\u54c1\"\"\u30d1\u30f3\u30fb\u30b7\u30ea\u30a2\u30eb\u985e\"\"\u83d3\u5b50\u30d1\u30f3\"\"\u5927\u962a\u5e9c\"2013-11-3011881881111117111703\"\u98df\u54c1\"\"\u52a0\u5de5\u98df\u54c1\"\"\u6f2c\u7269\u30fb\u4f43\u716e\"\"\u4f43\u716e\"\"\u5927\u962a\u5e9c\"2013-12-1411661661131301130127\"\u98df\u54c1\"\"\u83d3\u5b50\u985e\"\"\u83d3\u5b50\"\"\u30d3\u30b9\u30b1\u30c3\u30c8\u30fb\u30af\u30c3\u30ad?\"\"\u5927\u962a\u5e9c\" In\u00a0[10]: Copied! <pre># \u8cfc\u5165\u6570\u91cf\u306b\u95a2\u3059\u308b\u69cb\u6210\u6bd4\u7387\u306e\u8a08\u7b97\n(\n    df.group_by('\u5927\u5206\u985e\u540d')\n    .agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum())\n    .with_columns((pl.col('\u8cfc\u5165\u6570\u91cf')/pl.col('\u8cfc\u5165\u6570\u91cf').sum()).alias('\u69cb\u6210\u6bd4\u7387'))\n    .sort(by='\u69cb\u6210\u6bd4\u7387', descending=True)\n)\n</pre> # \u8cfc\u5165\u6570\u91cf\u306b\u95a2\u3059\u308b\u69cb\u6210\u6bd4\u7387\u306e\u8a08\u7b97 (     df.group_by('\u5927\u5206\u985e\u540d')     .agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum())     .with_columns((pl.col('\u8cfc\u5165\u6570\u91cf')/pl.col('\u8cfc\u5165\u6570\u91cf').sum()).alias('\u69cb\u6210\u6bd4\u7387'))     .sort(by='\u69cb\u6210\u6bd4\u7387', descending=True) ) Out[10]: shape: (5, 3)\u5927\u5206\u985e\u540d\u8cfc\u5165\u6570\u91cf\u69cb\u6210\u6bd4\u7387stri64f64\"\u98df\u54c1\"69851430.884151\"\u65e5\u7528\u54c1\"8447450.106924\"\u6587\u5316\u7528\u54c1\"494050.006253\"\u8010\u4e45\u6d88\u8cbb\u8ca1\"174430.002208\"\u8863\u985e\u30fb\u8eab\u306e\u56de\u308a\u54c1\u30fb\u30b9\u30dd\u30fc\u30c4\u7528\u202636600.000463 In\u00a0[11]: Copied! <pre># \u4f8b\u984c3.4\n# \u91d1\u984d\u306b\u95a2\u3059\u308b\u69cb\u6210\u6bd4\u7387\u306e\u8a08\u7b97\n(\n    df.group_by('\u5927\u5206\u985e\u540d')\n    .agg(pl.col('\u91d1\u984d').sum())\n    .with_columns((pl.col('\u91d1\u984d')/pl.col('\u91d1\u984d').sum()).alias('\u69cb\u6210\u6bd4\u7387'))\n    .sort(by='\u69cb\u6210\u6bd4\u7387', descending=True)\n)\n</pre> # \u4f8b\u984c3.4 # \u91d1\u984d\u306b\u95a2\u3059\u308b\u69cb\u6210\u6bd4\u7387\u306e\u8a08\u7b97 (     df.group_by('\u5927\u5206\u985e\u540d')     .agg(pl.col('\u91d1\u984d').sum())     .with_columns((pl.col('\u91d1\u984d')/pl.col('\u91d1\u984d').sum()).alias('\u69cb\u6210\u6bd4\u7387'))     .sort(by='\u69cb\u6210\u6bd4\u7387', descending=True) ) Out[11]: shape: (5, 3)\u5927\u5206\u985e\u540d\u91d1\u984d\u69cb\u6210\u6bd4\u7387stri64f64\"\u98df\u54c1\"11579803990.767476\"\u65e5\u7528\u54c1\"3202813120.212273\"\u6587\u5316\u7528\u54c1\"145070640.009615\"\u8010\u4e45\u6d88\u8cbb\u8ca1\"137259240.009097\"\u8863\u985e\u30fb\u8eab\u306e\u56de\u308a\u54c1\u30fb\u30b9\u30dd\u30fc\u30c4\u7528\u202623219270.001539 In\u00a0[12]: Copied! <pre># \u90fd\u9053\u5e9c\u770c\u3068\u5927\u5206\u985e\u306e\u30af\u30ed\u30b9\u96c6\u8a08\n(\n    df.group_by(['\u90fd\u9053\u5e9c\u770c\u540d', '\u5927\u5206\u985e\u540d']).agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum())\n    .pivot(values='\u8cfc\u5165\u6570\u91cf', index='\u90fd\u9053\u5e9c\u770c\u540d', columns='\u5927\u5206\u985e\u540d')\n)\n</pre> # \u90fd\u9053\u5e9c\u770c\u3068\u5927\u5206\u985e\u306e\u30af\u30ed\u30b9\u96c6\u8a08 (     df.group_by(['\u90fd\u9053\u5e9c\u770c\u540d', '\u5927\u5206\u985e\u540d']).agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum())     .pivot(values='\u8cfc\u5165\u6570\u91cf', index='\u90fd\u9053\u5e9c\u770c\u540d', columns='\u5927\u5206\u985e\u540d') ) Out[12]: shape: (9, 6)\u90fd\u9053\u5e9c\u770c\u540d\u65e5\u7528\u54c1\u6587\u5316\u7528\u54c1\u8010\u4e45\u6d88\u8cbb\u8ca1\u98df\u54c1\u8863\u985e\u30fb\u8eab\u306e\u56de\u308a\u54c1\u30fb\u30b9\u30dd\u30fc\u30c4\u7528\u54c1stri64i64i64i64i64\"\u5927\u962a\u5e9c\"121946779324201080425583\"\u611b\u77e5\u770c\"11494964862276974383429\"\u795e\u5948\u5ddd\u770c\"132658794822601022132585\"\u5343\u8449\u770c\"9329856801927631874426\"\u5175\u5eab\u770c\"6250538651112609932266\"\u57fc\u7389\u770c\"8729551201747731999320\"\u5317\u6d77\u9053\"9220241302008715934452\"\u798f\u5ca1\u770c\"10271161872926792718479\"\u8328\u57ce\u770c\"371812196767425746120 In\u00a0[13]: Copied! <pre># \u4f8b\u984c3.5\n# \u90fd\u9053\u5e9c\u770c\u3068\u5927\u5206\u985e\u306e\u69cb\u6210\u6bd4\u7387\u306e\u30af\u30ed\u30b9\u96c6\u8a08\n(\n    df.group_by(['\u90fd\u9053\u5e9c\u770c\u540d', '\u5927\u5206\u985e\u540d']).agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum())\n    .with_columns((pl.col('\u8cfc\u5165\u6570\u91cf')/pl.col('\u8cfc\u5165\u6570\u91cf').sum()).over('\u90fd\u9053\u5e9c\u770c\u540d').alias('\u69cb\u6210\u6bd4\u7387'))\n    .pivot(\n        values='\u69cb\u6210\u6bd4\u7387', index='\u90fd\u9053\u5e9c\u770c\u540d', columns='\u5927\u5206\u985e\u540d'\n    )\n)\n</pre> # \u4f8b\u984c3.5 # \u90fd\u9053\u5e9c\u770c\u3068\u5927\u5206\u985e\u306e\u69cb\u6210\u6bd4\u7387\u306e\u30af\u30ed\u30b9\u96c6\u8a08 (     df.group_by(['\u90fd\u9053\u5e9c\u770c\u540d', '\u5927\u5206\u985e\u540d']).agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum())     .with_columns((pl.col('\u8cfc\u5165\u6570\u91cf')/pl.col('\u8cfc\u5165\u6570\u91cf').sum()).over('\u90fd\u9053\u5e9c\u770c\u540d').alias('\u69cb\u6210\u6bd4\u7387'))     .pivot(         values='\u69cb\u6210\u6bd4\u7387', index='\u90fd\u9053\u5e9c\u770c\u540d', columns='\u5927\u5206\u985e\u540d'     ) ) Out[13]: shape: (9, 6)\u90fd\u9053\u5e9c\u770c\u540d\u65e5\u7528\u54c1\u8863\u985e\u30fb\u8eab\u306e\u56de\u308a\u54c1\u30fb\u30b9\u30dd\u30fc\u30c4\u7528\u54c1\u6587\u5316\u7528\u54c1\u8010\u4e45\u6d88\u8cbb\u8ca1\u98df\u54c1strf64f64f64f64f64\"\u5343\u8449\u770c\"0.1272470.0005810.0077470.0026280.861797\"\u57fc\u7389\u770c\"0.1056230.0003870.0061950.0021140.885682\"\u5175\u5eab\u770c\"0.0922340.0003930.0057030.0016410.90003\"\u798f\u5ca1\u770c\"0.113490.0005290.0068360.0032330.875911\"\u5927\u962a\u5e9c\"0.1005190.0004810.0064240.0019950.890582\"\u8328\u57ce\u770c\"0.0797860.0002580.0047120.0016460.913598\"\u795e\u5948\u5ddd\u770c\"0.1138130.0005020.0068190.0019390.876928\"\u5317\u6d77\u9053\"0.1131690.0005550.0050690.0024650.878742\"\u611b\u77e5\u770c\"0.104640.0003910.0059040.0020720.886994 In\u00a0[14]: Copied! <pre># \u98df\u54c1\u4e2d\u5206\u985e\u306e\u30af\u30ed\u30b9\u96c6\u8a08\nfig = px.bar(\n    df.filter(pl.col('\u5927\u5206\u985e\u540d')=='\u98df\u54c1')\n    .group_by(['\u4e2d\u5206\u985e\u540d', '\u90fd\u9053\u5e9c\u770c\u540d']).agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum()),\n    x='\u90fd\u9053\u5e9c\u770c\u540d', y='\u8cfc\u5165\u6570\u91cf', color='\u4e2d\u5206\u985e\u540d'\n)\nfig.update_layout(width=800, height=600)\nfig.show()\n</pre> # \u98df\u54c1\u4e2d\u5206\u985e\u306e\u30af\u30ed\u30b9\u96c6\u8a08 fig = px.bar(     df.filter(pl.col('\u5927\u5206\u985e\u540d')=='\u98df\u54c1')     .group_by(['\u4e2d\u5206\u985e\u540d', '\u90fd\u9053\u5e9c\u770c\u540d']).agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum()),     x='\u90fd\u9053\u5e9c\u770c\u540d', y='\u8cfc\u5165\u6570\u91cf', color='\u4e2d\u5206\u985e\u540d' ) fig.update_layout(width=800, height=600) fig.show() In\u00a0[15]: Copied! <pre># \u4f8b\u984c3.6\n# \u98df\u54c1\u4e2d\u5206\u985e\u306e\u69cb\u6210\u6bd4\u7387\u306e\u30af\u30ed\u30b9\u96c6\u8a08\nfig = px.bar(\n    df.filter(pl.col('\u5927\u5206\u985e\u540d')=='\u98df\u54c1')\n    .group_by(['\u4e2d\u5206\u985e\u540d', '\u90fd\u9053\u5e9c\u770c\u540d']).agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum())\n    .with_columns((pl.col('\u8cfc\u5165\u6570\u91cf')/pl.col('\u8cfc\u5165\u6570\u91cf').sum()).over('\u90fd\u9053\u5e9c\u770c\u540d').alias('\u69cb\u6210\u6bd4\u7387')),\n    x='\u90fd\u9053\u5e9c\u770c\u540d', y='\u69cb\u6210\u6bd4\u7387', color='\u4e2d\u5206\u985e\u540d'\n)\nfig.update_yaxes(range=[0, 1])\nfig.update_layout(width=800, height=600)\nfig.show()\n</pre> # \u4f8b\u984c3.6 # \u98df\u54c1\u4e2d\u5206\u985e\u306e\u69cb\u6210\u6bd4\u7387\u306e\u30af\u30ed\u30b9\u96c6\u8a08 fig = px.bar(     df.filter(pl.col('\u5927\u5206\u985e\u540d')=='\u98df\u54c1')     .group_by(['\u4e2d\u5206\u985e\u540d', '\u90fd\u9053\u5e9c\u770c\u540d']).agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum())     .with_columns((pl.col('\u8cfc\u5165\u6570\u91cf')/pl.col('\u8cfc\u5165\u6570\u91cf').sum()).over('\u90fd\u9053\u5e9c\u770c\u540d').alias('\u69cb\u6210\u6bd4\u7387')),     x='\u90fd\u9053\u5e9c\u770c\u540d', y='\u69cb\u6210\u6bd4\u7387', color='\u4e2d\u5206\u985e\u540d' ) fig.update_yaxes(range=[0, 1]) fig.update_layout(width=800, height=600) fig.show() In\u00a0[16]: Copied! <pre># \u51b7\u51cd\u98df\u54c1\u306e\u30af\u30ed\u30b9\u96c6\u8a08\nurl_reishoku_data = 'https://github.com/asakura-data-science/marketing/raw/main/Chapter_3/in/sec3-2data_reisyoku.csv'\ndf_reishoku = (\n    pl.read_csv(url_reishoku_data)\n    .with_columns(pl.col('\u65e5\u4ed8').cast(pl.Utf8).str.to_date(format='%Y%m%d'))\n    .group_by(['\u540d\u79f0', '\u90fd\u9053\u5e9c\u770c\u540d']).agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum())\n    .pivot(\n        values='\u8cfc\u5165\u6570\u91cf', index='\u540d\u79f0', columns='\u90fd\u9053\u5e9c\u770c\u540d'\n    )\n    .fill_null(0)\n    .with_columns(pl.sum_horizontal(pl.exclude('\u540d\u79f0')).alias('\u5408\u8a08'))\n    .sort(by='\u5408\u8a08', descending=True)\n)\n</pre> # \u51b7\u51cd\u98df\u54c1\u306e\u30af\u30ed\u30b9\u96c6\u8a08 url_reishoku_data = 'https://github.com/asakura-data-science/marketing/raw/main/Chapter_3/in/sec3-2data_reisyoku.csv' df_reishoku = (     pl.read_csv(url_reishoku_data)     .with_columns(pl.col('\u65e5\u4ed8').cast(pl.Utf8).str.to_date(format='%Y%m%d'))     .group_by(['\u540d\u79f0', '\u90fd\u9053\u5e9c\u770c\u540d']).agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum())     .pivot(         values='\u8cfc\u5165\u6570\u91cf', index='\u540d\u79f0', columns='\u90fd\u9053\u5e9c\u770c\u540d'     )     .fill_null(0)     .with_columns(pl.sum_horizontal(pl.exclude('\u540d\u79f0')).alias('\u5408\u8a08'))     .sort(by='\u5408\u8a08', descending=True) ) In\u00a0[17]: Copied! <pre># \u4f8b\u984c3.7\nprint('\u5546\u54c1\u6570:', df_reishoku.shape[0])\ndf_reishoku.head(30)\n</pre> # \u4f8b\u984c3.7 print('\u5546\u54c1\u6570:', df_reishoku.shape[0]) df_reishoku.head(30) <pre>\u5546\u54c1\u6570: 5103\n</pre> Out[17]: shape: (30, 11)\u540d\u79f0\u5927\u962a\u5e9c\u795e\u5948\u5ddd\u770c\u611b\u77e5\u770c\u798f\u5ca1\u770c\u57fc\u7389\u770c\u5317\u6d77\u9053\u5343\u8449\u770c\u5175\u5eab\u770c\u8328\u57ce\u770c\u5408\u8a08stri64i64i64i64i64i64i64i64i64i64\"\u51b7\u51cd\u98df\u54c14907\"7747117346574481613914452464567\"\u51b7\u51cd\u98df\u54c12459\"38027119931524912216692621856\"\u51b7\u51cd\u98df\u54c14897\"22428423223011118012598811565\"\u51b7\u51cd\u98df\u54c11985\"256170212298152681701071241557\"\u51b7\u51cd\u98df\u54c14892\"3172281461921519368891491433\"\u51b7\u51cd\u98df\u54c12342\"170196145277114907359561180\"\u51b7\u51cd\u98df\u54c11170\"2291967511910786103124981137\"\u51b7\u51cd\u98df\u54c14975\"1891541381271186294521021036\"\u51b7\u51cd\u98df\u54c12610\"13115397280881710166671000\"\u51b7\u51cd\u98df\u54c12359\"7224895123141551163968957\"\u51b7\u51cd\u98df\u54c12523\"129131107174101231016190917\"\u51b7\u51cd\u98df\u54c11091\"1921789312411317607164912\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\"\u51b7\u51cd\u98df\u54c11072\"721291001367167626772776\"\u51b7\u51cd\u98df\u54c11010\"124202695410456632972773\"\u51b7\u51cd\u98df\u54c15006\"1689371799048486976742\"\u51b7\u51cd\u98df\u54c15000\"162121336118922942528735\"\u51b7\u51cd\u98df\u54c14465\"711204211491256511483725\"\u51b7\u51cd\u98df\u54c13028\"781309913311119362587718\"\u51b7\u51cd\u98df\u54c14462\"129508911080186759101703\"\u51b7\u51cd\u98df\u54c12673\"18546826630604811966702\"\u51b7\u51cd\u98df\u54c10097\"8323858257074762538687\"\u51b7\u51cd\u98df\u54c13145\"1506169903266627964673\"\u51b7\u51cd\u98df\u54c14466\"10577995912913877427670\"\u51b7\u51cd\u98df\u54c12970\"117641021025242385994670 In\u00a0[18]: Copied! <pre># \u4f8b\u984c3.8\n(\n    df_reishoku.head(30)\n    .with_columns(pl.exclude('\u540d\u79f0', '\u5408\u8a08')/pl.col('\u5408\u8a08'))\n    .drop('\u5408\u8a08')\n)\n</pre> # \u4f8b\u984c3.8 (     df_reishoku.head(30)     .with_columns(pl.exclude('\u540d\u79f0', '\u5408\u8a08')/pl.col('\u5408\u8a08'))     .drop('\u5408\u8a08') ) Out[18]: shape: (30, 10)\u540d\u79f0\u5927\u962a\u5e9c\u795e\u5948\u5ddd\u770c\u611b\u77e5\u770c\u798f\u5ca1\u770c\u57fc\u7389\u770c\u5317\u6d77\u9053\u5343\u8449\u770c\u5175\u5eab\u770c\u8328\u57ce\u770cstrf64f64f64f64f64f64f64f64f64\"\u51b7\u51cd\u98df\u54c14907\"0.1694770.1556820.1607180.1438580.0980950.0352530.0856140.0974380.053865\"\u51b7\u51cd\u98df\u54c12459\"0.2047410.1460130.107220.169720.1341590.0657330.089440.0495690.033405\"\u51b7\u51cd\u98df\u54c14897\"0.1431310.181470.1482430.1469650.0709270.1150160.0798720.062620.051757\"\u51b7\u51cd\u98df\u54c11985\"0.1644190.1091840.1361590.1913940.0976240.0436740.1091840.0687220.07964\"\u51b7\u51cd\u98df\u54c14892\"0.2212140.1591070.1018840.1339850.1053730.0648990.0474530.0621070.103978\"\u51b7\u51cd\u98df\u54c12342\"0.1440680.1661020.1228810.2347460.096610.0762710.0618640.050.047458\"\u51b7\u51cd\u98df\u54c11170\"0.2014070.1723830.0659630.1046610.0941070.0756380.0905890.1090590.086192\"\u51b7\u51cd\u98df\u54c14975\"0.1824320.1486490.1332050.1225870.11390.0598460.0907340.0501930.098456\"\u51b7\u51cd\u98df\u54c12610\"0.1310.1530.0970.280.0880.0170.1010.0660.067\"\u51b7\u51cd\u98df\u54c12359\"0.0752350.2591430.0992690.1285270.1473350.0574710.1212120.0407520.071055\"\u51b7\u51cd\u98df\u54c12523\"0.1406760.1428570.1166850.1897490.1101420.0250820.1101420.0665210.098146\"\u51b7\u51cd\u98df\u54c11091\"0.2105260.1951750.1019740.1359650.1239040.018640.0657890.0778510.070175\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\"\u51b7\u51cd\u98df\u54c11072\"0.0927840.1662370.1288660.1752580.0914950.086340.0798970.086340.092784\"\u51b7\u51cd\u98df\u54c11010\"0.1604140.261320.0892630.0698580.1345410.0724450.0815010.0375160.093144\"\u51b7\u51cd\u98df\u54c15006\"0.2264150.1253370.0956870.1064690.1212940.064690.064690.0929920.102426\"\u51b7\u51cd\u98df\u54c15000\"0.2204080.1646260.0448980.0829930.2571430.0299320.1278910.0340140.038095\"\u51b7\u51cd\u98df\u54c14465\"0.0979310.1655170.0579310.1572410.1255170.0344830.0896550.1572410.114483\"\u51b7\u51cd\u98df\u54c13028\"0.1086350.1810580.1378830.1852370.1545960.0264620.0501390.0348190.12117\"\u51b7\u51cd\u98df\u54c14462\"0.1834990.0711240.12660.1564720.1137980.0256050.0953060.0839260.14367\"\u51b7\u51cd\u98df\u54c12673\"0.2635330.0655270.1168090.0940170.0427350.085470.0683760.1695160.094017\"\u51b7\u51cd\u98df\u54c10097\"0.1208150.3464340.0844250.036390.1018920.1077150.1106260.036390.055313\"\u51b7\u51cd\u98df\u54c13145\"0.2228830.0906390.1025260.133730.0475480.0980680.0921250.1173850.095097\"\u51b7\u51cd\u98df\u54c14466\"0.1567160.1149250.1477610.088060.1925370.0194030.1298510.1104480.040299\"\u51b7\u51cd\u98df\u54c12970\"0.1746270.0955220.1522390.1522390.0776120.0626870.0567160.088060.140299 In\u00a0[19]: Copied! <pre># \u30b9\u30d4\u30a2\u30de\u30f3\u306e\u9806\u4f4d\u76f8\u95a2\u4fc2\u6570\npl.DataFrame(\n    stats.spearmanr(df_reishoku.head(30).select(pl.exclude('\u540d\u79f0', '\u5408\u8a08')).to_numpy(), axis=0).statistic,\n    df_reishoku.select(pl.exclude('\u540d\u79f0', '\u5408\u8a08')).columns\n)\n</pre> # \u30b9\u30d4\u30a2\u30de\u30f3\u306e\u9806\u4f4d\u76f8\u95a2\u4fc2\u6570 pl.DataFrame(     stats.spearmanr(df_reishoku.head(30).select(pl.exclude('\u540d\u79f0', '\u5408\u8a08')).to_numpy(), axis=0).statistic,     df_reishoku.select(pl.exclude('\u540d\u79f0', '\u5408\u8a08')).columns ) Out[19]: shape: (9, 9)\u5927\u962a\u5e9c\u795e\u5948\u5ddd\u770c\u611b\u77e5\u770c\u798f\u5ca1\u770c\u57fc\u7389\u770c\u5317\u6d77\u9053\u5343\u8449\u770c\u5175\u5eab\u770c\u8328\u57ce\u770cf64f64f64f64f64f64f64f64f641.00.2602110.3699620.3521030.4169170.4059440.4074820.4372770.2237560.2602111.00.3258760.5224160.5509570.4920440.4741240.1173850.1306480.3699620.3258761.00.6937460.3903170.4382240.484970.0893490.4113330.3521030.5224160.6937461.00.4056070.2369830.4507010.3314030.4117060.4169170.5509570.3903170.4056071.00.1473240.5676130.0122510.222680.4059440.4920440.4382240.2369830.1473241.00.3217940.2679890.1416810.4074820.4741240.484970.4507010.5676130.3217941.00.1377010.1961480.4372770.1173850.0893490.3314030.0122510.2679890.1377011.00.1589620.2237560.1306480.4113330.4117060.222680.1416810.1961480.1589621.0 In\u00a0[20]: Copied! <pre>stats.spearmanr(df_reishoku.select(pl.exclude('\u540d\u79f0', '\u5408\u8a08')).to_numpy(), axis=0).statistic\n</pre> stats.spearmanr(df_reishoku.select(pl.exclude('\u540d\u79f0', '\u5408\u8a08')).to_numpy(), axis=0).statistic Out[20]: <pre>array([[1.        , 0.46399474, 0.47275958, 0.43268814, 0.43002943,\n        0.3361361 , 0.43796807, 0.68785589, 0.3883122 ],\n       [0.46399474, 1.        , 0.43148332, 0.35647345, 0.63642679,\n        0.3292525 , 0.62796494, 0.4599006 , 0.45730059],\n       [0.47275958, 0.43148332, 1.        , 0.37066235, 0.43547287,\n        0.38420383, 0.46764747, 0.47491876, 0.45113818],\n       [0.43268814, 0.35647345, 0.37066235, 1.        , 0.35376593,\n        0.3894329 , 0.37508022, 0.40276662, 0.3534561 ],\n       [0.43002943, 0.63642679, 0.43547287, 0.35376593, 1.        ,\n        0.34108824, 0.68269525, 0.43456183, 0.55142564],\n       [0.3361361 , 0.3292525 , 0.38420383, 0.3894329 , 0.34108824,\n        1.        , 0.36384319, 0.35122563, 0.37680226],\n       [0.43796807, 0.62796494, 0.46764747, 0.37508022, 0.68269525,\n        0.36384319, 1.        , 0.44952186, 0.55952588],\n       [0.68785589, 0.4599006 , 0.47491876, 0.40276662, 0.43456183,\n        0.35122563, 0.44952186, 1.        , 0.38191603],\n       [0.3883122 , 0.45730059, 0.45113818, 0.3534561 , 0.55142564,\n        0.37680226, 0.55952588, 0.38191603, 1.        ]])</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/chapter03.html","title":"\u713c\u8089\u5e97\u30c7\u30fc\u30bf\u306e\u57fa\u790e\u96c6\u8a08\u00b6","text":""},{"location":"notebooks/chapter03.html","title":"\u55b6\u696d\u65e5\u6570\u3068\u4eba\u6c17\u5546\u54c1\u306e\u78ba\u8a8d\u00b6","text":""},{"location":"notebooks/chapter03.html","title":"\u6708\u5225\u58f2\u4e0a\u91d1\u984d\u306e\u78ba\u8a8d\u00b6","text":""},{"location":"notebooks/chapter03.html","title":"\u90fd\u9053\u5e9c\u770c\u5225\u306e\u8cfc\u8cb7\u5546\u54c1\u50be\u5411\u306e\u767a\u898b\u00b6","text":""},{"location":"notebooks/chapter03.html","title":"\u5358\u7d14\u96c6\u8a08\u3068\u30af\u30ed\u30b9\u96c6\u8a08\u00b6","text":""},{"location":"notebooks/chapter03.html","title":"\u8a73\u7d30\u306a\u5206\u985e\u30ec\u30d9\u30eb\u306e\u96c6\u8a08\u00b6","text":""},{"location":"notebooks/chapter04.html","title":"\u7b2c4\u7ae0 \u9867\u5ba2\u306e\u5206\u6790","text":"In\u00a0[44]: Copied! <pre>import polars as pl\nimport numpy as np\nimport datetime\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport plotly.express as px\n</pre> import polars as pl import numpy as np import datetime from plotly.subplots import make_subplots import plotly.graph_objects as go import plotly.express as px In\u00a0[2]: Copied! <pre>url_data_4_1 = 'https://raw.githubusercontent.com/asakura-data-science/marketing/main/Chapter_4/in/sec4-1data.csv'\ndf = (\n    pl.read_csv(url_data_4_1)\n    .with_columns(pl.col('\u65e5\u4ed8').cast(pl.Utf8).str.to_date('%Y%m%d'))\n)\ndf.head()\n</pre> url_data_4_1 = 'https://raw.githubusercontent.com/asakura-data-science/marketing/main/Chapter_4/in/sec4-1data.csv' df = (     pl.read_csv(url_data_4_1)     .with_columns(pl.col('\u65e5\u4ed8').cast(pl.Utf8).str.to_date('%Y%m%d')) ) df.head() Out[2]: shape: (5, 16)\u30e2\u30cb\u30bf\u65e5\u4ed8\u8cfc\u5165\u6570\u91cf\u5358\u4fa1\u91d1\u984d\u5927\u5206\u985e\u4e2d\u5206\u985e\u5c0f\u5206\u985e\u7d30\u5206\u985e\u6027\u5225\u5e74\u4ee3\u672a\u65e2\u5a5a\u5927\u5206\u985e\u540d\u4e2d\u5206\u985e\u540d\u5c0f\u5206\u985e\u540d\u7d30\u5206\u985e\u540di64datei64i64i64i64i64i64i64i64i64i64strstrstrstr152013-07-15111811811414031403972103\"\u98df\u54c1\"\"\u98f2\u6599\u30fb\u9152\u985e\"\"\u6e05\u6dbc\u98f2\u6599\"\"\u305d\u306e\u4ed6\u6e05\u6dbc\u98f2\u6599\"152013-07-15112812811111071107072103\"\u98df\u54c1\"\"\u52a0\u5de5\u98df\u54c1\"\"\u51b7\u51cd\u98df\u54c1\"\"\u51b7\u51cd\u8abf\u7406\"152013-07-15114014022424042404132103\"\u65e5\u7528\u54c1\"\"\u5bb6\u5ead\u7528\u54c1\"\"\u53f0\u6240\u7528\u54c1\"\"\u30ad\u30c3\u30c1\u30f3\u30da\u30fc\u30d1\u30fc\"152013-07-151787811212031203972103\"\u98df\u54c1\"\"\u751f\u9bae\u98df\u54c1\"\"\u8fb2\u7523\"\"\u305d\u306e\u4ed6\u8fb2\u7523\"152013-07-1528316622626222622012103\"\u65e5\u7528\u54c1\"\"\u30da\u30c3\u30c8\u7528\u54c1\"\"\u732b\"\"\u732b\u30d5\u30fc\u30c9\" In\u00a0[3]: Copied! <pre># \u30e2\u30cb\u30bf\u5225\u91d1\u984d\u96c6\u8a08\n(\n    df.group_by('\u30e2\u30cb\u30bf').agg(pl.col('\u91d1\u984d').sum())\n    .sort(by='\u91d1\u984d', descending=True)\n    .head(10)\n)\n</pre> # \u30e2\u30cb\u30bf\u5225\u91d1\u984d\u96c6\u8a08 (     df.group_by('\u30e2\u30cb\u30bf').agg(pl.col('\u91d1\u984d').sum())     .sort(by='\u91d1\u984d', descending=True)     .head(10) ) Out[3]: shape: (10, 2)\u30e2\u30cb\u30bf\u91d1\u984di64i643858293657491733982618422572424463720321827610911112797732575897023618753835078426 In\u00a0[33]: Copied! <pre># \u30c7\u30b7\u30eb\u5206\u6790\u306e\u5404\u30e9\u30f3\u30af\u306e\u95be\u5024\u3068\u30e2\u30cb\u30bf\u5225\u306e\u30e9\u30f3\u30af\u306e\u8a08\u7b97\ndf_decile = (\n    df.group_by('\u30e2\u30cb\u30bf').agg(pl.col('\u91d1\u984d').sum())\n    .select(\n        pl.col('\u91d1\u984d'),\n        pl.col('\u91d1\u984d').qcut(\n            np.linspace(0, 1, 11)[1:],\n            labels=[str(i) for i in np.arange(1,12)]\n        ).alias('rank')\n    )\n    .group_by('rank').agg(pl.col('\u91d1\u984d').sum(), pl.col('\u91d1\u984d').min().alias('\u95be\u5024'))\n    .sort(by='\u95be\u5024', descending=True)\n    .with_columns(pl.col('\u91d1\u984d').cum_sum().alias('\u7d2f\u7a4d\u91d1\u984d'))\n    .with_columns((pl.col('\u7d2f\u7a4d\u91d1\u984d')/pl.col('\u91d1\u984d').sum()).alias('\u7d2f\u7a4d\u69cb\u6210\u6bd4\u7387'))\n)\ndisplay(df_decile)\n\n# plot\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.add_trace(\n    go.Bar(x=df_decile['rank'], y=df_decile['\u91d1\u984d'], name='\u91d1\u984d'),\n    secondary_y=False\n)\nfig.add_trace(\n    go.Scatter(x=df_decile['rank'], y=df_decile['\u7d2f\u7a4d\u69cb\u6210\u6bd4\u7387'], name='\u7d2f\u7a4d\u69cb\u6210\u6bd4\u7387'),\n    secondary_y=True\n)\nfig.update_xaxes(title_text='rank')\nfig.update_yaxes(range=[0, 1], secondary_y=True)\nfig.update_layout(width=800, height=600)\nfig.show()\n</pre> # \u30c7\u30b7\u30eb\u5206\u6790\u306e\u5404\u30e9\u30f3\u30af\u306e\u95be\u5024\u3068\u30e2\u30cb\u30bf\u5225\u306e\u30e9\u30f3\u30af\u306e\u8a08\u7b97 df_decile = (     df.group_by('\u30e2\u30cb\u30bf').agg(pl.col('\u91d1\u984d').sum())     .select(         pl.col('\u91d1\u984d'),         pl.col('\u91d1\u984d').qcut(             np.linspace(0, 1, 11)[1:],             labels=[str(i) for i in np.arange(1,12)]         ).alias('rank')     )     .group_by('rank').agg(pl.col('\u91d1\u984d').sum(), pl.col('\u91d1\u984d').min().alias('\u95be\u5024'))     .sort(by='\u95be\u5024', descending=True)     .with_columns(pl.col('\u91d1\u984d').cum_sum().alias('\u7d2f\u7a4d\u91d1\u984d'))     .with_columns((pl.col('\u7d2f\u7a4d\u91d1\u984d')/pl.col('\u91d1\u984d').sum()).alias('\u7d2f\u7a4d\u69cb\u6210\u6bd4\u7387')) ) display(df_decile)  # plot fig = make_subplots(specs=[[{\"secondary_y\": True}]]) fig.add_trace(     go.Bar(x=df_decile['rank'], y=df_decile['\u91d1\u984d'], name='\u91d1\u984d'),     secondary_y=False ) fig.add_trace(     go.Scatter(x=df_decile['rank'], y=df_decile['\u7d2f\u7a4d\u69cb\u6210\u6bd4\u7387'], name='\u7d2f\u7a4d\u69cb\u6210\u6bd4\u7387'),     secondary_y=True ) fig.update_xaxes(title_text='rank') fig.update_yaxes(range=[0, 1], secondary_y=True) fig.update_layout(width=800, height=600) fig.show() shape: (10, 5)rank\u91d1\u984d\u95be\u5024\u7d2f\u7a4d\u91d1\u984d\u7d2f\u7a4d\u69cb\u6210\u6bd4\u7387cati64i64i64f64\"10\"23094976481323094970.686537\"9\"4096663197627191630.808317\"8\"3029532442030221160.898375\"7\"138430997831605460.939525\"6\"89835659732503810.96623\"5\"54395415433047760.9824\"4\"32745244433375210.992134\"3\"15105112333526260.996624\"2\"825056433608760.999077\"1\"31063633639821.0 In\u00a0[42]: Copied! <pre># \u4f8b\u984c4.1\ndf_decile = (\n    df.filter(pl.col('\u4e2d\u5206\u985e\u540d')=='\u52a0\u5de5\u98df\u54c1')\n    .group_by('\u7d30\u5206\u985e\u540d').agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum())\n    .select(\n        pl.col('\u8cfc\u5165\u6570\u91cf'),\n        pl.col('\u8cfc\u5165\u6570\u91cf').qcut(\n            np.linspace(0, 1, 11)[1:],\n            labels=[str(i) for i in np.arange(1,12)]\n        ).alias('rank')\n    )\n    .group_by('rank').agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum(), pl.col('\u8cfc\u5165\u6570\u91cf').min().alias('\u95be\u5024'))\n    .sort(by='\u95be\u5024', descending=True)\n    .with_columns(pl.col('\u8cfc\u5165\u6570\u91cf').cum_sum().alias('\u7d2f\u7a4d\u8cfc\u5165\u6570\u91cf'))\n    .with_columns((pl.col('\u7d2f\u7a4d\u8cfc\u5165\u6570\u91cf')/pl.col('\u8cfc\u5165\u6570\u91cf').sum()).alias('\u7d2f\u7a4d\u69cb\u6210\u6bd4\u7387'))\n)\n\n# plot\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.add_trace(\n    go.Bar(x=df_decile['rank'], y=df_decile['\u8cfc\u5165\u6570\u91cf'], name='\u8cfc\u5165\u6570\u91cf'),\n    secondary_y=False\n)\nfig.add_trace(\n    go.Scatter(x=df_decile['rank'], y=df_decile['\u7d2f\u7a4d\u69cb\u6210\u6bd4\u7387'], name='\u7d2f\u7a4d\u69cb\u6210\u6bd4\u7387'),\n    secondary_y=True\n)\nfig.update_xaxes(title_text='rank')\nfig.update_yaxes(range=[0, 1], secondary_y=True)\nfig.update_layout(width=800, height=600)\nfig.show()\n</pre> # \u4f8b\u984c4.1 df_decile = (     df.filter(pl.col('\u4e2d\u5206\u985e\u540d')=='\u52a0\u5de5\u98df\u54c1')     .group_by('\u7d30\u5206\u985e\u540d').agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum())     .select(         pl.col('\u8cfc\u5165\u6570\u91cf'),         pl.col('\u8cfc\u5165\u6570\u91cf').qcut(             np.linspace(0, 1, 11)[1:],             labels=[str(i) for i in np.arange(1,12)]         ).alias('rank')     )     .group_by('rank').agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum(), pl.col('\u8cfc\u5165\u6570\u91cf').min().alias('\u95be\u5024'))     .sort(by='\u95be\u5024', descending=True)     .with_columns(pl.col('\u8cfc\u5165\u6570\u91cf').cum_sum().alias('\u7d2f\u7a4d\u8cfc\u5165\u6570\u91cf'))     .with_columns((pl.col('\u7d2f\u7a4d\u8cfc\u5165\u6570\u91cf')/pl.col('\u8cfc\u5165\u6570\u91cf').sum()).alias('\u7d2f\u7a4d\u69cb\u6210\u6bd4\u7387')) )  # plot fig = make_subplots(specs=[[{\"secondary_y\": True}]]) fig.add_trace(     go.Bar(x=df_decile['rank'], y=df_decile['\u8cfc\u5165\u6570\u91cf'], name='\u8cfc\u5165\u6570\u91cf'),     secondary_y=False ) fig.add_trace(     go.Scatter(x=df_decile['rank'], y=df_decile['\u7d2f\u7a4d\u69cb\u6210\u6bd4\u7387'], name='\u7d2f\u7a4d\u69cb\u6210\u6bd4\u7387'),     secondary_y=True ) fig.update_xaxes(title_text='rank') fig.update_yaxes(range=[0, 1], secondary_y=True) fig.update_layout(width=800, height=600) fig.show() In\u00a0[99]: Copied! <pre># RFM\u5206\u6790\n# \u30b9\u30b3\u30a2\u8a08\u7b97\u671f\u9593: 11\u670830\u65e5\u307e\u3067\n# R\ndf_rval = (\n    df.filter(pl.col('\u65e5\u4ed8') &lt;= datetime.date(2013, 11, 30))\n    .group_by('\u30e2\u30cb\u30bf').agg(pl.col('\u65e5\u4ed8').max())\n    .select(\n        pl.col('\u30e2\u30cb\u30bf'),\n        (datetime.date(2013, 12, 1) - pl.col('\u65e5\u4ed8')).dt.total_days().alias('R\u5024')\n    )\n)\n# F\ndf_fval = (\n    df.unique(subset=['\u65e5\u4ed8', '\u30e2\u30cb\u30bf'])\n    .group_by('\u30e2\u30cb\u30bf').agg(pl.col('\u65e5\u4ed8').len().alias('F\u5024'))\n)\n# M\ndf_mval = df.group_by('\u30e2\u30cb\u30bf').agg(pl.col('\u91d1\u984d').sum().alias('M\u5024'))\n</pre> # RFM\u5206\u6790 # \u30b9\u30b3\u30a2\u8a08\u7b97\u671f\u9593: 11\u670830\u65e5\u307e\u3067 # R df_rval = (     df.filter(pl.col('\u65e5\u4ed8') &lt;= datetime.date(2013, 11, 30))     .group_by('\u30e2\u30cb\u30bf').agg(pl.col('\u65e5\u4ed8').max())     .select(         pl.col('\u30e2\u30cb\u30bf'),         (datetime.date(2013, 12, 1) - pl.col('\u65e5\u4ed8')).dt.total_days().alias('R\u5024')     ) ) # F df_fval = (     df.unique(subset=['\u65e5\u4ed8', '\u30e2\u30cb\u30bf'])     .group_by('\u30e2\u30cb\u30bf').agg(pl.col('\u65e5\u4ed8').len().alias('F\u5024')) ) # M df_mval = df.group_by('\u30e2\u30cb\u30bf').agg(pl.col('\u91d1\u984d').sum().alias('M\u5024')) In\u00a0[100]: Copied! <pre># RFM\u30af\u30e9\u30b9\ndf_rfm = (\n    df_rval.join(df_fval, on='\u30e2\u30cb\u30bf', how='left').join(df_mval, on='\u30e2\u30cb\u30bf', how='left')\n    .with_columns(\n        # R\n        pl.when(pl.col('R\u5024') &lt; pl.col('R\u5024').median())\n        .then(pl.lit('H'))\n        .otherwise(pl.lit('L'))\n        .alias('Rclass'),\n        # F\n        pl.when(pl.col('F\u5024') &gt; pl.col('F\u5024').median())\n        .then(pl.lit('H'))\n        .otherwise(pl.lit('L'))\n        .alias('Fclass'),\n        # M\n        pl.when(pl.col('M\u5024') &gt; pl.col('M\u5024').median())\n        .then(pl.lit('H'))\n        .otherwise(pl.lit('L'))\n        .alias('Mclass'),\n    )\n    .with_columns((pl.col('Rclass')+pl.col('Fclass')+pl.col('Mclass')).alias('RFMclass'))\n    .sort('\u30e2\u30cb\u30bf')\n)\ndf_rfm.head()\n</pre> # RFM\u30af\u30e9\u30b9 df_rfm = (     df_rval.join(df_fval, on='\u30e2\u30cb\u30bf', how='left').join(df_mval, on='\u30e2\u30cb\u30bf', how='left')     .with_columns(         # R         pl.when(pl.col('R\u5024') &lt; pl.col('R\u5024').median())         .then(pl.lit('H'))         .otherwise(pl.lit('L'))         .alias('Rclass'),         # F         pl.when(pl.col('F\u5024') &gt; pl.col('F\u5024').median())         .then(pl.lit('H'))         .otherwise(pl.lit('L'))         .alias('Fclass'),         # M         pl.when(pl.col('M\u5024') &gt; pl.col('M\u5024').median())         .then(pl.lit('H'))         .otherwise(pl.lit('L'))         .alias('Mclass'),     )     .with_columns((pl.col('Rclass')+pl.col('Fclass')+pl.col('Mclass')).alias('RFMclass'))     .sort('\u30e2\u30cb\u30bf') ) df_rfm.head() Out[100]: shape: (5, 8)\u30e2\u30cb\u30bfR\u5024F\u5024M\u5024RclassFclassMclassRFMclassi64i64u32i64strstrstrstr147811306\"L\"\"L\"\"L\"\"LLL\"1513912880\"L\"\"L\"\"L\"\"LLL\"161691738163\"L\"\"H\"\"H\"\"LHH\"2013545981\"H\"\"H\"\"H\"\"HHH\"2128111949\"L\"\"L\"\"L\"\"LLL\" In\u00a0[101]: Copied! <pre># RFM\u30bb\u30b0\u30e1\u30f3\u30c8\u5225\u306e12\u6708\u306e\u8cfc\u5165\u72b6\u6cc1\n(\n    df_rfm.join(\n        df.filter(pl.col('\u65e5\u4ed8') &gt; datetime.date(2013, 11, 30))\n        .group_by('\u30e2\u30cb\u30bf').agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum()),\n        on='\u30e2\u30cb\u30bf', how='left'\n    )\n    .fill_null(0)\n    .group_by('RFMclass')\n    .agg(\n        (pl.col('\u8cfc\u5165\u6570\u91cf') == 0).sum().alias('\u518d\u8cfc\u5165\u306a\u3057'),\n        (pl.col('\u8cfc\u5165\u6570\u91cf') &gt; 0).sum().alias('\u518d\u8cfc\u5165\u3042\u308a'),\n        pl.col('\u8cfc\u5165\u6570\u91cf').mean().alias('\u5e73\u5747\u8cfc\u5165\u6570\u91cf')\n    )\n    .with_columns(\n        (pl.col('\u518d\u8cfc\u5165\u3042\u308a')/(pl.col('\u518d\u8cfc\u5165\u3042\u308a')+pl.col('\u518d\u8cfc\u5165\u306a\u3057'))).alias('\u518d\u8cfc\u5165\u7387')\n    )\n    .select('RFMclass', '\u518d\u8cfc\u5165\u306a\u3057', '\u518d\u8cfc\u5165\u3042\u308a', '\u518d\u8cfc\u5165\u7387', '\u5e73\u5747\u8cfc\u5165\u6570\u91cf')\n    .sort('RFMclass')\n)\n</pre> # RFM\u30bb\u30b0\u30e1\u30f3\u30c8\u5225\u306e12\u6708\u306e\u8cfc\u5165\u72b6\u6cc1 (     df_rfm.join(         df.filter(pl.col('\u65e5\u4ed8') &gt; datetime.date(2013, 11, 30))         .group_by('\u30e2\u30cb\u30bf').agg(pl.col('\u8cfc\u5165\u6570\u91cf').sum()),         on='\u30e2\u30cb\u30bf', how='left'     )     .fill_null(0)     .group_by('RFMclass')     .agg(         (pl.col('\u8cfc\u5165\u6570\u91cf') == 0).sum().alias('\u518d\u8cfc\u5165\u306a\u3057'),         (pl.col('\u8cfc\u5165\u6570\u91cf') &gt; 0).sum().alias('\u518d\u8cfc\u5165\u3042\u308a'),         pl.col('\u8cfc\u5165\u6570\u91cf').mean().alias('\u5e73\u5747\u8cfc\u5165\u6570\u91cf')     )     .with_columns(         (pl.col('\u518d\u8cfc\u5165\u3042\u308a')/(pl.col('\u518d\u8cfc\u5165\u3042\u308a')+pl.col('\u518d\u8cfc\u5165\u306a\u3057'))).alias('\u518d\u8cfc\u5165\u7387')     )     .select('RFMclass', '\u518d\u8cfc\u5165\u306a\u3057', '\u518d\u8cfc\u5165\u3042\u308a', '\u518d\u8cfc\u5165\u7387', '\u5e73\u5747\u8cfc\u5165\u6570\u91cf')     .sort('RFMclass') ) Out[101]: shape: (8, 5)RFMclass\u518d\u8cfc\u5165\u306a\u3057\u518d\u8cfc\u5165\u3042\u308a\u518d\u8cfc\u5165\u7387\u5e73\u5747\u8cfc\u5165\u6570\u91cfstru32u32f64f64\"HHH\"9260.74285738.428571\"HHL\"210.3333331.333333\"HLH\"200.00.0\"HLL\"920.1818181.818182\"LHH\"620.2512.375\"LHL\"210.3333333.333333\"LLH\"510.1666671.333333\"LLL\"3220.0588240.794118 In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/chapter04.html#rfm","title":"\u30c7\u30b7\u30eb\u5206\u6790\u3068RFM\u5206\u6790\u306b\u3088\u308b\u9867\u5ba2\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u00b6","text":""},{"location":"notebooks/chapter04.html","title":"\u30c7\u30b7\u30eb\u5206\u6790\u00b6","text":""},{"location":"notebooks/chapter04.html#rfm","title":"RFM\u5206\u6790\u00b6","text":"<ul> <li>Recency: \u57fa\u6e96\u65e5\u304b\u3089\u306e\u76f4\u8fd1\u306e\u6765\u5e97\u65e5\u307e\u3067\u306e\u671f\u9593</li> <li>Frequency: \u671f\u9593\u5185\u306e\u7d2f\u7a4d\u6765\u5e97\u56de\u6570(\u3082\u3057\u304f\u306f\u7d2f\u7a4d\u6765\u5e97\u65e5\u6570)</li> <li>Monetary: \u671f\u9593\u5185\u306e\u7d2f\u7a4d\u8cfc\u8cb7\u91d1\u984d</li> </ul>"},{"location":"notebooks/chapter04.html","title":"\u5065\u5eb7\u5fd7\u5411\u306e\u6d88\u8cbb\u8005\u306b\u7279\u5fb4\u7684\u306a\u8cfc\u8cb7\u884c\u52d5\u3092\u63a2\u308b\u00b6","text":""}]}